window.SIDEBAR_ITEMS = {"macro":[["const_residue","Creates a `Residue` with the given value for a specific modulus. For example, `residue!(U256::from(105u64), MyModulus);` creates a `Residue` for 105 mod `MyModulus`."],["impl_modulus","Implements a modulus with the given name, type, and value, in that specific order. Please `use crypto_bigint::traits::Encoding` to make this work. For example, `impl_modulus!(MyModulus, U256, \"73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001\");` implements a 256-bit modulus named `MyModulus`."],["nlimbs","Calculate the number of limbs required to represent the given number of bits."]],"mod":[["consts","Type aliases for many constants."],["modular","Implements modular arithmetic for constant moduli."],["prelude","Import prelude for this crate: includes important traits."]],"struct":[["Checked","Provides intentionally-checked arithmetic on `T`."],["CtChoice","A boolean value returned by constant-time `const fn`s."],["Limb","Big integers are represented as an array of smaller CPU word-size integers called “limbs”."],["NonZero","Wrapper type for non-zero integers."],["Reciprocal","A pre-calculated reciprocal for division by a single limb."],["Uint","Big unsigned integer."],["Wrapping","Provides intentionally-wrapped arithmetic on `T`."]],"trait":[["AddMod","Compute `self + rhs mod p`."],["ArrayDecoding","Support for decoding a `GenericArray` as a big integer."],["ArrayEncoding","Support for encoding a big integer as a `GenericArray`."],["Bounded","Integers whose representation takes a bounded amount of space."],["CheckedAdd","Checked addition."],["CheckedMul","Checked multiplication."],["CheckedSub","Checked subtraction."],["Concat","Concatenate two numbers into a “wide” twice-width value, using the `rhs` value as the least significant value."],["Encoding","Encoding support."],["Integer","Integer type."],["Invert","Constant-time inversion."],["MulMod","Compute `self * rhs mod p`."],["NegMod","Compute `-self mod p`."],["Pow","Constant-time exponentiation."],["PowBoundedExp","Constant-time exponentiation with exponent of a bounded bit size."],["Random","Random number generation support."],["RandomMod","Modular random number generation support."],["Split","Split a number in half, returning the most significant half followed by the least significant."],["Square","Support for optimized squaring"],["SubMod","Compute `self - rhs mod p`."],["Zero","Zero values."]],"type":[["ByteArray","Alias for a byte array whose size is defined by [`ArrayEncoding::ByteSize`]."],["U1024","1024-bit unsigned big integer."],["U128","128-bit unsigned big integer."],["U1280","1280-bit unsigned big integer."],["U1536","1536-bit unsigned big integer."],["U1792","1792-bit unsigned big integer."],["U192","192-bit unsigned big integer."],["U2048","2048-bit unsigned big integer."],["U256","256-bit unsigned big integer."],["U3072","3072-bit unsigned big integer."],["U320","320-bit unsigned big integer."],["U3584","3584-bit unsigned big integer."],["U384","384-bit unsigned big integer."],["U4096","4096-bit unsigned big integer."],["U448","448-bit unsigned big integer."],["U512","512-bit unsigned big integer."],["U576","576-bit unsigned big integer."],["U6144","6144-bit unsigned big integer."],["U64","64-bit unsigned big integer."],["U640","640-bit unsigned big integer."],["U768","768-bit unsigned big integer."],["U8192","8192-bit unsigned big integer."],["U896","896-bit unsigned big integer."],["WideWord","Wide integer type: double the width of [`Word`]."],["Word","Unsigned integer type that the [`Limb`] newtype wraps."]]};