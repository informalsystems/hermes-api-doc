window.SIDEBAR_ITEMS = {"mod":[["consts","Type aliases for many constants."],["ops","Traits for arithmetic operations on elliptic curve field elements."],["point","Traits for elliptic curve points."],["scalar","Scalar types."],["sec1","Support for SEC1 elliptic curve encoding formats."],["weierstrass","Complete projective formulas for prime order elliptic curves as described in Renes-Costello-Batina 2015."]],"struct":[["Error","Elliptic curve errors."],["NonZeroScalar","Non-zero scalar type."],["PublicKey","Elliptic curve public keys."],["ScalarPrimitive","Generic scalar type with primitive functionality."],["SecretKey","Elliptic curve secret keys."]],"trait":[["Curve","Elliptic curve."],["CurveArithmetic","Elliptic curve with an arithmetic implementation."],["Field","This trait represents an element of a field."],["FieldBytesEncoding","Trait for decoding/encoding `Curve::Uint` from/to [`FieldBytes`] using curve-specific rules."],["Group","This trait represents an element of a cryptographic group."],["PrimeCurve","Marker trait for elliptic curves with prime order."],["PrimeCurveArithmetic","Prime order elliptic curve with projective arithmetic implementation."],["PrimeField","This represents an element of a non-binary prime field."]],"type":[["FieldBytes","Byte representation of a base/scalar field element of a given curve."],["FieldBytesSize","Size of serialized field elements of this elliptic curve."],["Result","Result type with the `elliptic-curve` crateâ€™s [`Error`] type."]]};