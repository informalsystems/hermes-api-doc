initSidebarItems({"enum":[["AsyncRunner","Called when collecting async instruments"],["InstrumentKind","Kinds of OpenTelemetry metric instruments"],["MetricsError","Errors returned by the metrics API."],["NumberKind","A descriptor for the encoded data type of a `Number`"]],"mod":[["noop","No-op OpenTelemetry Metrics Implementation"],["registry","Metrics Registry API"],["sdk_api","Metrics SDK API"]],"struct":[["AtomicNumber","An atomic version of `Number`"],["BatchObserver","An Observer callback that can report observations for multiple instruments."],["BatchObserverResult","Passed to a batch observer callback to capture observations for multiple asynchronous instruments."],["BoundCounter","BoundCounter is a bound instrument for counters."],["BoundUpDownCounter","BoundUpDownCounter is a bound instrument for counters."],["BoundValueRecorder","BoundValueRecorder is a bound instrument for recording  per-request non-additive values."],["Counter","A metric that accumulates values."],["CounterBuilder","Configuration for building a counter."],["Descriptor","Descriptor contains all the settings that describe an instrument, including its name, metric kind, number kind, and the configurable options."],["InstrumentConfig","Config contains some options for metrics of any kind."],["Measurement","Measurement is used for reporting a synchronous batch of metric values. Instances of this type should be created by synchronous instruments (e.g., `Counter::measurement`)."],["Meter","Meter is the OpenTelemetry metric API, based on a sdk-defined `MeterCore` implementation and the `Meter` library name."],["Number","Number represents either an integral or a floating point value. It needs to be accompanied with a source of NumberKind that describes the actual type of the value stored within Number."],["Observation","Observation is used for reporting an asynchronous batch of metric values. Instances of this type should be created by asynchronous instruments (e.g., ValueObserver::observation)."],["ObserverResult","Data passed to an observer callback to capture observations for one asynchronous metric instrument."],["SumObserver","A metric that captures a precomputed sum of values at a point in time."],["SumObserverBuilder","Configuration options for building a `SumObserver`"],["Unit","Units denote underlying data units tracked by `Meter`s."],["UpDownCounter","A metric instrument that sums non-monotonic values."],["UpDownCounterBuilder","Configuration for a new up down counter."],["UpDownSumObserver","A metric that captures a precomputed non-monotonic sum of values at a point in time."],["UpDownSumObserverBuilder","Configuration options for building a `UpDownSumObserver`"],["ValueObserver","A metric that captures a set of values at a point in time."],["ValueObserverBuilder","Configuration options for building a `ValueObserver`"],["ValueRecorder","ValueRecorder is a metric that records per-request non-additive values."],["ValueRecorderBuilder","Initialization configuration for a given `ValueRecorder`."]],"trait":[["MeterProvider","Returns named meter instances"]],"type":[["Result","A specialized `Result` type for metric operations."]]});