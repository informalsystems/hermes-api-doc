window.SIDEBAR_ITEMS = {"mod":[["allow_null","Serialize/deserialize `nil`able value into `T`, where `nil` turns into the `Default` value."],["apphash","AppHash serialization with validation"],["bytes","Serialize/deserialize bytes (`Vec<u8>`) type"],["evidence",""],["from_str","Serialize and deserialize any `T` that implements [[core::str::FromStr]] and [[core::fmt::Display]] from or into string. Note this can be used for all primitive data types."],["hash","Hash serialization with validation"],["nullable","Serialize/deserialize `nil`able type into `T`, where `nil` turns into the default impl."],["opt_tm_hash_base64","Encoding/decoding Option Tendermint hashes to/from base64."],["option_hash","`Option<Hash>` serialization with validation"],["optional","Serialize/deserialize `Option<T>` type where `T` has a serializer/deserializer. Use `null` if the received value equals the `Default` implementation."],["optional_from_str","De/serialize an optional type that must be converted from/to a string."],["part_set_header_total","Serialize and deserialize part_set_header.total (from string or u32), (into u32 in part_set_header.total)."],["public_key",""],["time","An alternative timestamp serialization/deserialization mechanism for RFC3339-compatible timestamps to that provided by the `tendermint-proto` crate."],["time_duration","Serialize/deserialize core::time::Duration type from and into string:"],["timestamp","Serialize/deserialize Timestamp type from and into string:"],["tm_hash_base64","Encoding/decoding Tendermint hashes to/from base64."],["tx_hash_base64","Encoding/decoding ABCI transaction hashes to/from base64."],["txs","Serialize/deserialize `Vec<Vec<u8>>` type from and into transactions (Base64String array)."]]};