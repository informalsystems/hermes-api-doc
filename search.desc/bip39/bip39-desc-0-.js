searchState.loadedDescShard("bip39", 0, "This is a Rust implementation of the bip39 standard for …\nThe language determines which words will be used in a …\nThe primary type in this crate, most tasks require …\nDetermines the number of words that will be present in a …\nThe secret value used to derive HD wallet addresses from a …\nGet the seed value as a byte slice\nReturn the number of checksum bits\nGet the original entropy value of the mnemonic phrase as a …\nReturn the number of entropy bits\nGet a <code>MnemonicType</code> for a mnemonic phrase representing the …\nGet a <code>MnemonicType</code> for an existing mnemonic phrase\nGet a <code>MnemonicType</code> for a mnemonic phrase with a specific …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>Mnemonic</code> from pre-generated entropy\nConstruct a word list from its language code. Returns None …\nCreate a <code>Mnemonic</code> from an existing mnemonic phrase\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume the <code>Mnemonic</code> and return the phrase as a <code>String</code>.\nGet the <code>Language</code>\nGenerates a new <code>Mnemonic</code>\nGenerates the seed from the <code>Mnemonic</code> and the password.\nGet the mnemonic phrase as a string reference.\nReturn the number of entropy+checksum bits\nValidate a mnemonic phrase\nReturn the number of words\nGet the word list for this language\nGet a <code>WordMap</code> that allows word -&gt; index lookups in the …")