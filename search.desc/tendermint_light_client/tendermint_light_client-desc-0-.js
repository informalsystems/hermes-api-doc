searchState.loadedDescShard("tendermint_light_client", 0, "See the <code>light_client</code> module for the main documentation.\nDSL for building light clients and supervisor\nComponents used by the Light Client.\nPredicates used in components contracts.\nToplevel errors raised by the light client.\nSupervisor and Handle implementation.\nLight client implementation as per the Core Verification …\nCrypto function traits allowing mocking out during testing\nPredicates for light block validation and verification.\nState maintained by the light client.\nInterface and implementations of the light block store.\nDefines or just re-exports the main datatypes used by the …\nBuilder for a light client <code>Instance</code>\nBuild the light client <code>Instance</code>.\nInitialize a builder for a custom light client, by …\nErrors raised by the builder DSL\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInitialize a builder for a production (non-mock) light …\nKeep using the latest verified or trusted block in the …\nSet the given light block as the initial trusted state.\nSet the block from the primary peer at the given height as …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProvides an interface and a default implementation of the …\nProvides an interface and a default implementation of the …\nProvides an interface and default implementation of the …\nAbstracts over the current time.\nProvides the current wall clock time.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the current time.\nA specific height\nType for selecting either a specific height or the latest …\nThe latest height\nInterface for fetching light blocks from a full node, …\nProduction implementation of the Io component, which …\nFetch a light block at the given height from a peer\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this error means that a timeout occurred when …\nConstructs a new ProdIo component.\nThe scheduler decides what block to verify next given the …\nBasic bisecting scheduler which picks the appropriate …\nDecides what block to verify next.\nChecks whether the given <code>scheduled_height</code> is a valid …\nWhether or not the given block is within the given …\nWhether or not the given light store contains a trusted …\nWhether or not the given light store contains a verified or\nExtension methods for <code>ErrorKind</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether this error means that the light block has expired, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the height of the requested light block is higher …\nWhether an I/O error occured when querying a node.\nWhether this error means that a timeout occurred when …\nWhether this error means that a timeout occurred when …\nWhether this error means that the light block cannot be …\nA light client <code>Instance</code> packages a <code>LightClient</code> together …\nReturns the argument unchanged.\nGet or fetch the block at the given height\nCalls <code>U::from(self)</code>.\nGet the latest trusted block.\nThe light client for this instance\nConstructs a new instance from the given light client and …\nReturn the peer id of this instance.\nThe state of the light client for this instance\nTrust the given block.\nThe light client implements a read operation of a header …\nVerification parameters\nCorrection parameter dealing with only approximately …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a new light client from boxed components\nLook in the light store for a block from the given peer at …\nGet the block at the given height or the latest block from …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new light client\nOptions for this light client\nThe peer id of the peer this client is connected to\nDefines what fraction of the total voting power of a known …\nHow long a validator set is trusted for (must be shorter …\nAttempt to update the light client to the highest block of …\nUpdate the light client to a block of the primary node at …\nValidates the commit associated with a header against a …\nProduction-ready implementation of a commit validator.\nDefault implementation of a <code>VotingPowerCalculator</code>.\nDefault implementation of a <code>VotingPowerCalculator</code>, …\nComputes the voting power in a commit against a validator …\nTally for the voting power computed by the …\nCheck against the given threshold that there is enough …\nCheck if there is 2/3rd overlap between an untrusted …\nProvides an interface and default implementation for the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTallied voting power\nTotal voting power\nCompute the total voting power in a validator set\nTrust threshold for voting power\nPerform basic validation\nPerform full validation, only necessary if we do full …\nProvides an interface and default implementation for the …\nCompute the voting power in a header and its commit …\nValidates the commit associated with a header against a …\nProduction-ready implementation of a commit validator.\nPerform basic validation\nPerform full validation, only necessary if we do full …\nDefault implementation of a <code>VotingPowerCalculator</code>.\nDefault implementation of a <code>VotingPowerCalculator</code>, …\nComputes the voting power in a commit against a validator …\nTally for the voting power computed by the …\nCheck against the given threshold that there is enough …\nCheck if there is 2/3rd overlap between an untrusted …\nTallied voting power\nTotal voting power\nCompute the total voting power in a validator set\nTrust threshold for voting power\nCompute the voting power in a header and its commit …\nProduction predicates, using the default implementation of …\nThe implementation of SHA256 digest\nDefines the various predicates used to validate and verify …\nReturns the argument unchanged.\nCheck that there is enough signers overlap between the …\nCheck that there is enough validators overlap between the …\nCheck that the hash of the header in the commit matches …\nCalls <code>U::from(self)</code>.\nCheck that the untrusted header is from past.\nCheck that the chain-ids of the trusted header and the …\nCheck that time passed monotonically between the trusted …\nCheck that the height increased between the trusted header …\nCheck that the trusted header is within the trusting …\nCheck that the hash of the next validator set in the …\nValidate the commit using the given commit validator.\nCheck that the hash of the next validator set in the …\nCompare the provided validator_set_hash against the hash …\nThe state managed by the light client.\nRecords which blocks were needed to verify a target block, …\nReturns the argument unchanged.\nGet the verification trace for the block at <code>target_height</code>.\nCalls <code>U::from(self)</code>.\nStore for light blocks.\nCreate a new state from the given light store with an …\nRecord that the block at <code>height</code> was needed to verify the …\nRecords which blocks were needed to verify a target block, …\nStore for light blocks.\nGet an iterator of all light blocks with the given status.\nGet the light block at the given height with the given …\nGet a block at a given height whatever its verification …\nGet the light block of the given height with the trusted …\nGet the light block of greatest height with the given …\nGet the light block of greatest height before the given …\nGet the light block of greatest height with the trusted or …\nGet the first light block before the given height with the …\nInsert a new light block in the store with the given …\nGet the light block of lowest height with the given status.\nGet the light block of lowest height with the trusted or …\nTransient in-memory store\nRemove the light block with the given height and status, …\nUpdate the <code>status</code> of the given <code>light_block</code>.\nTransient in-memory store.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new, empty, in-memory store\nA commit contains the justification (ie. a set of …\nThe light block has failed verification.\nHash digests\nA header contains metadata about the block and about the …\nBlock height for a particular chain (i.e. number of blocks …\nContains the local status information, like the latest …\nA light block is the core data structure used by the light …\nEmpty hash\nPeer ID (public key) of a full node\nSHA-256 hashes\nA signed header contains both a <code>Header</code> and its …\nVerification status of a light block.\nTendermint timestamps\ndefines what fraction of the total voting power of a known …\nThe light block has been successfully verified and has …\nTrusted block parameters needed for light client …\nA type alias for a <code>LightBlock</code>.\nUntrusted block parameters needed for light client …\nThe light has not been verified yet.\nInfo about a single validator\nValidator address\nSet of validators\nThe light block has been successfully verified.\nValidator account address\nCheck whether this time is after the given time.\nReturn the digest algorithm used to produce this hash\nState after txs from the previous block\nBorrow the <code>Hash</code> as a byte slice\nObtain the verification parameters for the light block …\nObtain the verification parameters for the light block …\nCheck whether this time is before the given time.\nThe latest block hash we are trusting.\nBlock ID\nChain ID\nComputes <code>self + duration</code>, returning <code>None</code> if an overflow …\nComputes <code>self - duration</code>, returning <code>None</code> if an overflow …\nCommit containing signatures for the header\nThe list of fullnodes we are connected to, primary and …\nConsensus params for the current block\nMerkle root of transaction hashes\nCalculate the amount of time which has passed since …\nHash of evidence included in the block\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>Hash</code> with the given algorithm type\nDecode a <code>Hash</code> from upper-case hexadecimal\nBlock header\nConvenience method to expose the height of the associated …\nReturns the height of this block.\nCurrent block height\nBlock height\nThe latest height we are trusting.\nIncrement the block height by 1\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvenience function to check for Hash::None\nReturn a slice of all the possible values for this enum.\nPrevious block info\nCommit from validators from the last block\nRoot hash of all results from the txs from the previous …\nReturns the most trusted status between the two given one.\nValidator name\nConstructs a new light block\nBuilds a new instance of this struct.\nValidator set at the next block height\nValidator set at the next block height\nValidators for the next block\nParse <code>Time</code> from an RFC 3339 date\nValidator voting power\nOriginal proposer of the block\nValidator proposer priority\nThe peer ID of the node that provided this block\nThe peer ID of the node that provided this block\nValidator public key\nRound\nSignatures\nHeader and commit of this block\nHeader and commit of this block\nReturns the time at which this block was created.\nCurrent timestamp\nReturn an RFC 3339 and ISO 8601 date and time string with …\nGet the unix epoch (“1970-01-01 00:00:00 UTC”) as a …\nReturn a Unix timestamp in seconds.\nReturn a Unix timestamp in nanoseconds.\nValidator set at the block height\nValidator set at the block height\nValidators for the current block\nThe latest validator set we are trusting. Note that this …\nGet inner integer value. Alternative to <code>.0</code> or <code>.into()</code>\nHeader version")