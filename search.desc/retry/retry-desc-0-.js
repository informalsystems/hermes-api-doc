searchState.loadedDescShard("retry", 0, "Crate <code>retry</code> provides utilities for retrying operations …\nContains an error value to return immediately.\nAn error with a retryable operation.\nContains the success value.\nA result that represents either success, retryable …\nContains the error value if duration is exceeded.\nDifferent types of delay for retryable operations.\nThe error returned by the operation on the last try.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the result is <code>OperationResult::Err</code>.\nReturns <code>true</code> if the result is <code>OperationResult::Ok</code>.\nReturns <code>true</code> if the result is <code>OperationResult::Retry</code>.\nRetry the given operation synchronously until it succeeds, …\nRetry the given operation synchronously until it succeeds, …\nThe duration spent waiting between retries of the …\nThe total number of times the operation was tried.\nEach retry increases the delay since the last …\nEach retry uses a delay which is the sum of the two …\nEach retry uses a fixed delay.\nEach retry happens immediately without any delay.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>Exponential</code> using the given millisecond …\nCreate a new <code>Fibonacci</code> using the given duration in …\nCreate a new <code>Fixed</code> using the given duration in …\nCreate a new <code>Exponential</code> using the given millisecond …\nCreate a new <code>Exponential</code> using the given millisecond …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")