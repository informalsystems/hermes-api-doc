searchState.loadedDescShard("tendermint_config", 0, "Tendermint Configuration Utilities\nMechanism to connect to the ABCI application: socket | grpc\nBadgerDB backend\nBoltDB backend\nCLevelDB backend\nconsensus configuration options\nHTTP headers allowed to be sent via CORS to the RPC API\nHTTP methods allowed with CORS requests to the RPC API\nOrigin hosts allowed with CORS requests to the RPC API\nDatabase backend\nfastsync configuration options\nGoLevelDB backend\nGRPC\ninstrumentation configuration options\nJSON\n“kv” (default) - the simplest possible indexer, backed …\nLogging format\nLoglevel configuration\nIterator over log levels\nmempool configuration options\nP2P node private keys\n“null”\npeer to peer configuration options\nPlain (colored text)\nValidator private key\nRocksDB backend\nTendermint <code>config.toml</code> file’s <code>[rpc]</code> section\nSocket\nstatesync configuration options\nStorage configuration options.\nTendermint <code>config.toml</code> file\nRate at which bytes can be sent/received\ntransactions indexer configuration options\nWhat indexer to use for transactions\nMechanism to connect to the ABCI application: socket | grpc\nPath to address book\nSet <code>true</code> for strict address routability rules Set <code>false</code> …\nAddress\nToggle to disable guard against peers connecting from the …\nBroadcast enabled\nGet the transfer rate in bytes per second\nSize of the cache (used to filter transactions we saw …\nconsensus configuration options\nGet the consensus public key for this validator private key\nA list of non simple headers the client is allowed to use …\nA list of methods the client is allowed to use with …\nA list of origins a cross-domain request can be executed …\nEmptyBlocks mode\nInterval between empty blocks\nDatabase backend: …\nDatabase directory\nTimeout when dialing other peers\nTime to spend discovering snapshots before initiating a …\nHow many blocks to look back to check existence of the node…\nState sync rapidly bootstraps a new node by discovering, …\nAddress to advertise to peers for them to dial If empty, …\nIf this node is many blocks behind the tip of the chain, …\nfastsync configuration options\nIf <code>true</code>, query the ABCI app on connecting to a new peer so …\nTime to wait before flushing messages out on the connection\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nPath to the JSON file containing the initial validator set …\nGet the setting for the given key. If not found, returns …\nA global log level\nTCP or UNIX socket address for the gRPC server to listen on\nMaximum number of simultaneous GRPC connections. Does not …\nHandshake timeout\nWhat indexer to use for transactions\ninstrumentation configuration options\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate over the levels. This doesn’t include the global …\nDo not remove invalid transactions from the cache …\nTCP or UNIX socket address for the RPC server to listen on\nAddress to listen for incoming connections\nLoad <code>genesis.json</code> file from the configured location\nLoad <code>node_key.json</code> from a file\nLoad <code>node_key.json</code> from a file\nLoad <code>node_key.json</code> file from the configured location\nLoad <code>config.toml</code> from a file\nOutput format: ‘plain’ (colored text) or ‘json’\nOutput level for logging, including package level options\nMaximum size of a batch of transactions to send to a peer …\nMaximum size of request body, in bytes\nMaximum size of request header, in bytes\nMaximum number of inbound peers\nMaximum number of outbound peers to connect to, excluding …\nMaximum number of simultaneous connections (including …\nMaximum number of simultaneous connections.\nMaximum size of a message packet payload, in bytes\nMaximum number of unique clientIDs that can <code>/subscribe</code>.\nMaximum number of unique queries a given client can …\nMaximum size of a single transaction. NOTE: the max size …\nLimit the total size of all txs in the mempool. This only …\nmempool configuration options\nA custom human readable name for this node\nInstrumentation namespace\nRemote addresses (<code>tcp://</code> or <code>unix://</code>)\nGet node ID for this keypair\nPath to the JSON file containing the private key to use …\npeer to peer configuration options\nParse <code>node_key.json</code>\nParse <code>priv_validator_key.json</code>\nParse Tendermint <code>config.toml</code>\nReactor sleep duration\nReactor query sleep duration\nComma separated list of nodes to keep persistent …\nMaximum pause when redialing a persistent peer (if zero, …\nSet <code>true</code> to enable the peer-exchange reactor\npprof listen address https://golang.org/pkg/net/http/pprof\nPrivate key\nPrivate key\nPath to the JSON file containing the private key to use as …\nTCP or UNIX socket address for Tendermint to listen on for …\nPath to the JSON file containing the last sign state of a …\nComma separated list of peer IDs to keep private (will not …\nWhen <code>true</code>, Prometheus metrics are served under /metrics on …\nAddress to listen for Prometheus collector(s) connections\nTCP or UNIX socket address of the ABCI application, or the …\nPublic key\nGet the public key for this keypair\nRecheck enabled\nRate at which packets can be received, in bytes/second\nrpc server configuration options\nRPC servers (comma-separated) for light client …\nSeed mode, in which node constantly crawls the network and …\nComma separated list of seed nodes to connect to\nRate at which packets can be sent, in bytes/second\nMaximum number of transactions in the mempool\nMake progress as soon as we have all the precommits (as if …\nstatesync configuration options\nStorage configuration options. This section was only first …\nTemporary directory for state sync snapshot chunks, …\nHow long to wait for a tx to be committed during …\nCommit timeout\nPrecommit timeout\nPrecommit timeout delta\nPrevote timeout\nPrevote timeout delta\nPropose timeout\nPropose timeout delta\nThe name of a file containing certificate that is used to …\nThe name of a file containing matching private key that is …\nTrust hash. See <code>rpc_servers</code> above.\nTrust height. See <code>rpc_servers</code> above.\nTrust period. See <code>rpc_servers</code> above.\ntransactions indexer configuration options\nList of node IDs, to which a connection will be …\nActivate unsafe RPC commands like <code>/dial_seeds</code> and …\nUPNP port forwarding\nFast Sync version to use:\nWAL dir\nPath to WAL file\nRemote address (TCP or UNIX socket)\nURI prefix for TCP connections\nTCP connections\nURI prefix for Unix socket connections\nUNIX domain sockets\nReturns the argument unchanged.\nConvert <code>ListenAddress</code> to a <code>net::Address</code>\nCalls <code>U::from(self)</code>.\nHostname or IP address\nPath to a UNIX domain socket path\nRemote peer ID\nPort")