searchState.loadedDescShard("tendermint_testgen", 0, "<code>tendermint-testgen</code> is a small utility for producing …\nHelpers for organizing and running the tests\nHelper types for generating Tendermint datastructures\nHelper functions\nA macro that generates a complete setter method from a …\nApalache has found a counterexample\nApalache has found a deadlock\nApalache model checking run failed (e.g. a parsing error)\nApalache has not found a counterexample up to specified …\nThe tool has reached the specified timeout without …\nApalache returned an unknown error code\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA thin wrapper around process::Command to facilitate …\nThe result of a command execution if the child process …\nAdd a new program argument\nAdd a new program argument, concatenated from several parts\nSet the working directory for the child process\nCheck whether the given program can be executed\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a new Command\nSet the program to run\nExecute the command as a child process, and extract its …\nReturns the argument unchanged.\nGenerate commit votes from all validators in the header. …\nCalls <code>U::from(self)</code>.\nMake a new commit using default votes produced from the …\nMake a new commit using explicit votes.\nGet a mutable reference to the vote at the given index …\nGet a mutable reference to the vote of the given validator.\nDefault consensus params modeled after Go code; but it’s …\nA trait that allows to generate complex objects from …\nGenerate and serialize the complex object\nGenerate the complex object from this companion object.\nMerge this companion with the another, default one. The …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTries to parse a string as the given type; otherwise …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWe use this data structure as a simplistic representation …\nA light block is the core data structure used by the light …\nreturns the chain_id of LightBlock’s header\nReturns the argument unchanged.\nReturns the argument unchanged.\nA helper function to generate SignedHeader used by …\nreturns the height of LightBlock’s header\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nreturns the last_block_id hash of LightBlock’s header\nConstructs a new Testgen-specific light block\nProduces a subsequent, i.e. at (height+1), light block to …\nValidator set at the next block height\nThe peer ID of the node that provided this block\nHeader and commit of this block\nValidator set at the block height\nexpects at least one LightBlock in the Chain\nfetches a block from LightChain at a certain height it …\nfetches a mutable block from LightChain at a certain height\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nfetches the latest block from LightChain\nA test environment, which is essentially a wrapper around …\nTester allows you to easily run some test functions over a …\nCopy a file from the path outside environment into the …\nCopy a file from the path outside environment into the …\nCopy a file from the path relative to the other …\nCopy a file from the path relative to the other …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a relative path to the full path from the test …\nConvert a relative path to the full path from the test root\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\ntest name\nParse a file from a path relative to the environment …\nRead a file from a path relative to the environment …\nConvert a full path to the path relative to the test root …\nRemove a file from a path relative to the environment …\ntest function\nWrite a file to a path relative to the environment current …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nA helper function to generate multiple validators at once.\nGet private key for this validator companion.\nGet public key for this validator companion.\nCalls <code>U::from(self)</code>.\nA helper function to sort validators according to the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")