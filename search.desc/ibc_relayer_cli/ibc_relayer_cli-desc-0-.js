searchState.loadedDescShard("ibc_relayer_cli", 0, "Hermes: IBC Relayer CLI built in Rust\nThe path to the default configuration file, relative to …\nDefinition of the application, based on the Abscissa …\nContains functions to generate a relayer config for a …\nVarious utilities for the Hermes CLI\nDefinition of all the Hermes subcommands\nVarious components for internal use by the Abscissa …\nCustom-made solution to output a JSON return message and …\nDefinition of the entrypoint for the Hermes CLI.\nAll errors which can be raised from a command.\nApplication-local prelude.\nApplication state\nCli Application\nPost-configuration lifecycle callback.\nObtain a read-only (multi-reader) lock on the application …\nObtain a read-only (multi-reader) lock on the application …\nAccessor for application configuration.\nReturns the path to the configuration file\nReturns <code>true</code> if the given debug section is enabled\nReturns the enabled debug sections\nOverrides the default abscissa components, so that we can …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWhether or not JSON output is enabled\nRegister all components used by this application.\nBorrow the application state immutably.\nFetches a list of ChainConfigs specified by the given …\nPair of chain handles that are used by most CLIs.\nCheck that the relayer can send on the given channel and …\nDestination chain handle\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSpawns a chain runtime for specified chain identifier, …\nSpawns a chain runtime for the chain in the configuration …\nSpawns a chain runtime for the chain in the configuration …\nSpawn the source and destination chain runtime from the …\nSource chain handle\nClear objects, such as outstanding packets on a channel.\nCli Subcommands\nGenerate auto-complete scripts for different shells.\nGenerate a new Hermes configuration file or validate an …\nCreate objects (client, connection, or channel) on chains\nListen to block events and handles evidence\nInteract with the fee middleware\nPerforms a health check of all chains in the the config\nManage keys in the relayer for each chain\nListen to and display IBC events emitted by a chain\nUpdate tracing log directives\nListen to client update IBC events and handle misbehaviour\nQuery objects from the chain\nStart the relayer in multi-chain mode.\nCreate and send IBC transactions\nUpdate objects (clients) on chains\nUpgrade objects (clients) after chain upgrade\nThe <code>version</code> subcommand, retained for backward …\nAuthors of this program\nLocation of the configuration file This is called only …\nDefault configuration file path\nDescription of this program\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nName of this program as a string\nApply changes to the config after it’s been loaded, e.g. …\nA custom component for parametrizing <code>tracing</code> in the …\nA custom component for parametrizing <code>tracing</code> in the …\nBuild a tracing directive setting the log level for the …\nCheck if both stdout and stderr are proper terminal (tty), …\nReturns the argument unchanged.\nReturns the argument unchanged.\nIdentifier for this component\nIdentifier for this component\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>JsonTracing</code> component\nCreates a new <code>PrettyTracing</code> component\nVersion of this component\nVersion of this component\nA CLI output with support for JSON serialization. The only …\nThe result to display before quitting, can either be a …\nRepresents the exit status of any CLI command\nQuick-access constructor for an output message signalling …\nExits from the process with the current output. …\nFunctional-style method to exit a program.\nExits the program. Useful when a type produces an error …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this output value to a JSON value\nReturns true if the application global json flag <code>--json</code> is …\nConstructs a new <code>Output</code> with the provided <code>status</code> and an …\nThe result of a command, such as the output from a query …\nThe return status\nQuick-access constructor for an output signalling a …\nQuick-access constructor for an output signalling a …\nConstructor that returns a new <code>Output</code> having an <code>Error</code> …\nBuilder-style method for attaching a plain text message to …\nBuilder-style method for attaching a result to an output …\nConstructor that returns a new <code>Output</code> having a <code>Success</code> …\nGet the path to configuration file\nEntry point for Hermes CLI.\nAuthors of this program\nSubcommand to execute.\nPath to the configuration file\nPath to the command’s configuration file\nEnable the given debug sections, separated by commas.\nDescription of this program\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nToggle JSON output mode one verbosity setting\nName of this program as a string\nProcess the configuration after it has been loaded, …\nAn error raised within the relayer CLI\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAbscissa core prelude Application types implementing this …\nConfiguration type used by this application.\nApplication (sub)command which serves as the main entry …\nSubcommand of an application: derives or otherwise …\nSubcommand of an application: derives or otherwise …\nThe “debug” level.\nThe “error” level.\nThe “info” level.\nAbscissa core prelude Describes the level of verbosity of …\nPaths to application resources,\nAbscissa core prelude <code>Runnable</code> is a common trait for …\nAbscissa core prelude\nThe “trace” level.\nThe “warn” level.\nPost-configuration lifecycle callback.\nApplication state accessors\nApplication state accessors\nReturns the string representation of the <code>Level</code>.\nAuthors of this program\nAuthors of this program\nAuthors of this application.\nAccessor for application configuration.\nAbscissa core prelude Constructs an event at the debug …\nDescription of this program\nDescription of this program\nDescription of this application.\nAbscissa core prelude Ensure a condition holds, returning …\nAbscissa core prelude Constructs an event at the error …\nAbscissa core prelude Events represent single points in …\nAbscissa core prelude Constructs a new <code>Event</code>.\nAbscissa core prelude Create and return an error with a …\nAbscissa core prelude Terminate the application with a …\nAbscissa core prelude Create a new error (of a given kind) …\nInitialize the framework’s default set of components, …\nReturns the argument unchanged.\nAbscissa core prelude Constructs an event at the info …\nLoad this application’s configuration and initialize its …\nCalls <code>U::from(self)</code>.\nLoad configuration from the given path.\nName of this program as a string\nName of this program as a string\nName of this application as a string.\nParse command-line arguments from a string iterator\nParse command-line arguments from a string iterator\nParse command-line arguments from the environment\nParse command-line arguments from the environment\nRegister all components used by this application.\nRun this <code>Runnable</code>\nRun application with the given command-line arguments and …\nShut down this application gracefully, exiting with …\nAbscissa core prelude Spans represent periods of time in …\nAbscissa core prelude Constructs a new span.\nBorrow the application state.\nAbscissa core prelude Print an error message (in red if …\nAbscissa core prelude Print an informational status …\nAbscissa core prelude Print a success status message (in …\nAbscissa core prelude Print a warning status message (in …\nColor configuration for this application.\nAbscissa core prelude Constructs an event at the trace …\nGet the tracing configuration for this application.\nAbscissa core prelude Constructs an event at the warn …\n<code>Event</code>s represent single points in time where something …\nConstructs a new <code>Event</code> with the specified metadata and set …\nConstructs a new <code>Event</code> with the specified metadata and set …\nReturns an iterator over the set of values on this <code>Event</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns true if the new event’s parent should be …\nReturns true if the new event should be a root.\nReturns metadata describing this <code>Event</code>.\nReturns a new <code>Event</code> in the current span, with the …\nReturns a new <code>Event</code> as a child of the specified span, with …\nReturns the new event’s explicitly-specified parent, if …\nVisits all the fields on this <code>Event</code> with the specified …\nTrait implemented by types which have a span <code>Id</code>.\nAttributes provided to a <code>Subscriber</code> describing a new span …\nA guard representing a span which has been entered and is …\nAn owned version of <code>Entered</code>, a guard representing a span …\nIdentifies a span within the context of a subscriber.\nA set of fields recorded by a span.\nA handle representing a span, with the capability to enter …\nReturns the <code>Id</code> of the span that <code>self</code> corresponds to, or …\nConstructs a new <code>Span</code> as child of the given parent span, …\nReturns <code>Attributes</code> describing a new child span of the …\nReturns <code>true</code> if this set of <code>Attributes</code> contains a value …\nReturns <code>true</code> if this <code>Record</code> contains a value for the given …\nReturns a handle to the span considered by the <code>Subscriber</code> …\nEnters this span, returning a guard that will exit the …\nEnters this span, consuming it and returning a guard that …\nExits this span, returning the underlying <code>Span</code>.\nReturns a <code>Field</code> for the field with the given <code>name</code>, if one …\nReturns the set of all fields defined by this span’s …\nIndicates that the span with the given ID has an indirect …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a new span ID from the given <code>NonZeroU64</code>.\nConstructs a new span ID from the given <code>u64</code>.\nReturns true if this <code>Span</code> has a field for the given <code>Field</code> …\nReturns this span’s <code>Id</code>, if it is enabled.\nReturns this span’s <code>Id</code>, if it is enabled.\nExecutes the given function in the context of this span.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the span’s ID as a <code>NonZeroU64</code>.\nReturns the span’s ID as a <code>u64</code>.\nReturns true if the new span’s parent should be …\nReturns <code>true</code> if this span was disabled by the subscriber …\nReturns true if this set of <code>Attributes</code> contains <em>no</em> values.\nReturns true if this <code>Record</code> contains <em>no</em> values.\nReturns <code>true</code> if this span was constructed by <code>Span::none</code> …\nReturns true if the new span should be a root.\nReturns the number of fields that would be visited from …\nReturns this span’s <code>Metadata</code>, if it is enabled.\nReturns a reference to the new span’s metadata.\nConstructs a new <code>Span</code> with the given metadata and set of …\nReturns <code>Attributes</code> describing a new child span of the …\nConstructs a new <code>Record</code> from a <code>ValueSet</code>.\nConstructs a new disabled span with the given <code>Metadata</code>.\nConstructs a new <code>Span</code> as the root of its own trace tree, …\nReturns <code>Attributes</code> describing a new span at the root of …\nConstructs a new span that is <em>completely disabled</em>.\nReturns this span, if it was enabled by the current …\nReturns the new span’s explicitly-specified parent, if …\nRecords that the field described by <code>field</code> has the value …\nRecords all the fields in this set of <code>Attributes</code> with the …\nRecords all the fields in this <code>Record</code> with the provided …\nRecords all the fields in the provided <code>ValueSet</code>.\nReturns a reference to a <code>ValueSet</code> containing any values …\nInvokes a function with a reference to this span’s ID …")