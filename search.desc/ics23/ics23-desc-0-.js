searchState.loadedDescShard("ics23", 0, "Use BatchEntry not CommitmentProof, to avoid recursion\nBatchProof is a group of multiple proof types than can be …\nripemd160(sha256(x))\nCommitmentProof is either an ExistenceProof or a …\nUse BatchEntry not CommitmentProof, to avoid recursion\nContains the error value\nExistenceProof takes a key and a value and a set of steps …\nFIXED32_BIG uses big-endian encoding of the length as a 32 …\nFIXED32_LITTLE uses little-endian encoding of the length …\nFIXED64_BIG uses big-endian encoding of the length as a 64 …\nFIXED64_LITTLE uses little-endian encoding of the length …\nIf this is to be executed in a blockchain context, then we …\nInnerOp represents a merkle-proof step that is not a leaf. …\nInnerSpec contains all store-specific structure info to …\nLeafOp represents the raw key-value data we wish to prove, …\nLengthOp defines how to process the key and value of the …\nNO_HASH is the default if no data passed. Note this is an …\nNO_PREFIX don’t include any length info\nNonExistenceProof takes a proof of two neighbors, one left …\nContains the success value\nProofSpec defines what the expected parameters are for a …\nREQUIRE_32_BYTES is like NONE, but will fail if the input …\nREQUIRE_64_BYTES is like NONE, but will fail if the input …\nVAR_PROTO uses protobuf (and go-amino) varint encoding of …\nVAR_RLP uses rlp int encoding of the length\nString value of the enum field names used in the ProtoBuf …\nString value of the enum field names used in the ProtoBuf …\nNested message and enum types in <code>BatchEntry</code>.\nBLAKE2b-512 hash function.\nBLAKE2s-256 hash function.\nBLAKE3 hash function.\nChild order is the ordering of the children node, must …\nNested message and enum types in <code>CommitmentProof</code>.\nNested message and enum types in <code>CompressedBatchEntry</code>.\nempty child is the prehash image that is used when one …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>HashOp</code>, or <code>None</code> if <code>value</code> is not a …\nConverts an <code>i32</code> to a <code>LengthOp</code>, or <code>None</code> if <code>value</code> is not a …\nCreates an enum from field names used in the ProtoBuf …\nCreates an enum from field names used in the ProtoBuf …\nReturns the enum value of <code>hash</code>, or the default if the …\nReturns the enum value of <code>hash</code>, or the default if the …\nReturns the enum value of <code>hash</code>, or the default if the …\nhash is the algorithm that must be used for each InnerOp\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>HashOp</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>LengthOp</code>.\nThe Keccak-256 hash function.\nTODO: remove this as unnecessary??? we prove a range\nTODO: remove this as unnecessary??? we prove a range\nany field in the ExistenceProof must be the same as in …\nReturns the enum value of <code>length</code>, or the default if the …\nmax_depth (if &gt; 0) is the maximum number of InnerOps …\nmin_depth (if &gt; 0) is the minimum number of InnerOps …\nthese are indexes into the lookup_inners table in …\nprefix is a fixed bytes that may optionally be included at …\nReturns the enum value of <code>prehash_key</code>, or the default if …\nprehash_key_before_comparison is a flag that indicates …\nReturns the enum value of <code>prehash_value</code>, or the default if …\nThe Ripemd160 hash function.\nSets <code>hash</code> to the provided enum value.\nSets <code>hash</code> to the provided enum value.\nSets <code>hash</code> to the provided enum value.\nSets <code>length</code> to the provided enum value.\nSets <code>prehash_key</code> to the provided enum value.\nSets <code>prehash_value</code> to the provided enum value.\nThe SHA-256 hash algorithm\nThe SHA-512 hash algorithm\nThe SHA-512 hash algorithm with its output truncated to …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …")