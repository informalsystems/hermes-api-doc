searchState.loadedDescShard("tendermint_light_client_verifier", 0, "Verification failed, the block is invalid.\nThe minimum voting power threshold is not reached, the …\nPredicate verifier encapsulating components necessary to …\nThe default production implementation of the …\nVerification succeeded, the block is valid.\nRepresents the result of the verification performed by the …\nThe verifier checks:\nEnsure the header isn’t from a future time\nErrors which may be raised when verifying a <code>LightBlock</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructor.\nCrypto function traits allowing mocking out during testing\nLight client implementation as per the Core Verification …\nPredicates for light block validation and verification.\nDefines or just re-exports the main datatypes used by the …\nValidate an <code>UntrustedBlockState</code> coming from a client …\nVerify that more than 2/3 of the validators correctly …\nVerify that a) there is enough overlap between the …\nVerify a header received in <code>MsgSubmitMisbehaviour</code>. The …\nVerify a header received in <code>MsgSubmitMisbehaviour</code>. The …\nVerify a header received in a <code>MsgUpdateClient</code>.\nValidate the given light block state by performing the …\nValidates an <code>UntrustedBlockState</code>.\nExtension methods for <code>ErrorKind</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether this error means that the light block has expired, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the height of the requested light block is higher …\nWhether an I/O error occurred when querying a node.\nWhether this error means that a timeout occurred when …\nWhether this error means that the light block cannot be …\nProvides an interface and default implementation for the …\nProvides an interface and default implementation for the …\nValidates the commit associated with a header against a …\nProduction-ready implementation of a commit validator.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPerform basic validation\nPerform full validation, only necessary if we do full …\nDefault implementation of a <code>VotingPowerCalculator</code>.\nDefault implementation of a <code>VotingPowerCalculator</code>, …\nComputes the voting power in a commit against a validator …\nTally for the voting power computed by the …\nCheck that there is enough trust between an untrusted …\nCheck if there is 2/3rd overlap between an untrusted …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTallied voting power\nTotal voting power\nCompute the total voting power in a validator set\nTrust threshold for voting power\nCompute the voting power in a header and its commit …\nCompute the voting power in a header and its commit …\nVerification parameters\nCorrection parameter dealing with only approximately …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDefines what fraction of the total voting power of a known …\nHow long a validator set is trusted for (must be shorter …\nProduction predicates, using the default implementation of …\nThe implementation of SHA256 digest\nDefines the various predicates used to validate and verify …\nReturns the argument unchanged.\nCheck that there is enough signers overlap between the …\nChecks that there is enough overlap between validators and …\nCheck that the hash of the header in the commit matches …\nCalls <code>U::from(self)</code>.\nCheck that the untrusted header is from past.\nCheck that the chain-ids of the trusted header and the …\nCheck that time passed monotonically between the trusted …\nCheck that the height increased between the trusted header …\nCheck that the trusted header is within the trusting …\nCheck that the hash of the next validator set in the …\nValidate the commit using the given commit validator.\nCheck that the hash of the next validator set in the …\nCompare the provided validator_set_hash against the hash …\nA commit contains the justification (ie. a set of …\nThe light block has failed verification.\nHash digests\nA header contains metadata about the block and about the …\nBlock height for a particular chain (i.e. number of blocks …\nContains the local status information, like the latest …\nA light block is the core data structure used by the light …\nEmpty hash\nPeer ID (public key) of a full node\nSHA-256 hashes\nA signed header contains both a <code>Header</code> and its …\nVerification status of a light block.\nTendermint timestamps\ndefines what fraction of the total voting power of a known …\nThe light block has been successfully verified and has …\nTrusted block parameters needed for light client …\nA type alias for a <code>LightBlock</code>.\nUntrusted block parameters needed for light client …\nThe light has not been verified yet.\nInfo about a single validator\nValidator address\nSet of validators\nThe light block has been successfully verified.\nValidator account address\nCheck whether this time is after the given time.\nReturn the digest algorithm used to produce this hash\nState after txs from the previous block\nBorrow the <code>Hash</code> as a byte slice\nObtain the verification parameters for the light block …\nObtain the verification parameters for the light block …\nCheck whether this time is before the given time.\nThe latest block hash we are trusting.\nBlock ID\nChain ID\nComputes <code>self + duration</code>, returning <code>None</code> if an overflow …\nComputes <code>self - duration</code>, returning <code>None</code> if an overflow …\nCommit containing signatures for the header\nThe list of fullnodes we are connected to, primary and …\nConsensus params for the current block\nMerkle root of transaction hashes\nCalculate the amount of time which has passed since …\nHash of evidence included in the block\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>Hash</code> with the given algorithm type\nDecode a <code>Hash</code> from upper-case hexadecimal\nBlock header\nConvenience method to expose the height of the associated …\nReturns the height of this block.\nCurrent block height\nBlock height\nThe latest height we are trusting.\nIncrement the block height by 1\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvenience function to check for Hash::None\nReturn a slice of all the possible values for this enum.\nPrevious block info\nCommit from validators from the last block\nRoot hash of all results from the txs from the previous …\nReturns the most trusted status between the two given one.\nValidator name\nConstructs a new light block\nBuilds a new instance of this struct.\nValidator set at the next block height\nValidator set at the next block height\nValidators for the next block\nParse <code>Time</code> from an RFC 3339 date\nValidator voting power\nOriginal proposer of the block\nValidator proposer priority\nThe peer ID of the node that provided this block\nThe peer ID of the node that provided this block\nValidator public key\nRound\nSignatures\nHeader and commit of this block\nHeader and commit of this block\nReturns the time at which this block was created.\nCurrent timestamp\nReturn an RFC 3339 and ISO 8601 date and time string with …\nGet the unix epoch (“1970-01-01 00:00:00 UTC”) as a …\nReturn a Unix timestamp in seconds.\nReturn a Unix timestamp in nanoseconds.\nValidator set at the block height\nValidator set at the block height\nValidators for the current block\nThe latest validator set we are trusting. Note that this …\nGet inner integer value. Alternative to <code>.0</code> or <code>.into()</code>\nHeader version")