searchState.loadedDescShard("opentelemetry_sdk", 0, "OpenTelemetry SDK\nInformation about a library or crate providing …\nAn immutable representation of the entity producing …\nMetrics Export\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOpenTelemetry Metrics SDK\nThe library name.\nCreate an new instrumentation library.\nOpenTelemetry Propagators\nRepresentations of entities producing telemetry.\nProvides an abstraction of several async runtimes\nSchema url used by this library.\nOpenTelemetry Trace SDK\nThe library version.\nMarker trait for errors returned by exporters\nThe name of exporter that returned this error\nMetrics Export\nTrace exporters\nA container for the exported data for a single metric …\nAggregatorSelector supports selecting the kind of …\nA utility extension to allow upcasting.\nThe interface used to create checkpoints.\nAn interface for producing configured <code>Checkpointer</code> …\nIndividually exported metric\nA number exported as debug for serialization\nInstrumentationLibraryReader is an interface for exporters …\nThe interface used by a controller to coordinate the …\nMetric data processor.\nA container for the common elements for exported metric …\nExporter handles presentation of the checkpoint of …\nProcessor is responsible for deciding which kind of …\nReader allows a controller to access a complete checkpoint …\nA container for the exported data for a single metric …\nAn OpenTelemetry metric exporter that transmits telemetry …\nConfiguration for a given stdout exporter.\nAllows <code>Accumulator</code> implementations to construct new …\nMetrics aggregation\nThe checkpointed aggregator for this metric.\nThe aggregator for this metric\nThis allocates a variable number of aggregators of a kind …\nAggregatorSelector is responsible for selecting the …\nCreate an <code>Arc&lt;dyn Processor&gt;</code> from an impl of <code>Processor</code>.\nThe attributes associated with the instrument and the …\nThe attributes associated with the instrument and the …\nThe attributes associated with the instrument and the …\nBuild a new push controller, returning errors if they …\nSynchronizes the checkpoint process and allows a single …\nCreates a new configured checkpointer.\nA description of the metric instrument being exported.\nA description of the metric instrument being exported.\nA description of the metric instrument being exported.\nThe end time of the interval covered by this aggregation.\nExport is called immediately after completing a collection …\nends a collection interval.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\npopulated if using last value aggregator\nmetric name\nCreate a new <code>Record</code> instance.\nCreate a new <code>Metadata</code> instance.\nProcess is called by the SDK once per internal record, …\nProcesses metric data for export.\nReader returns the current data set.\nAllows <code>Processor</code> implementations to construct export …\nbegins a collection interval.\nThe start time of the interval covered by this aggregation.\nCreate a new stdout exporter builder with the …\npopulated if using sum aggregator\nThe temporality selector for this exporter\nmetric timestamp\nForEach calls the passed function once per instrumentation …\nForEach iterates over aggregated checkpoints for all …\nSet the attribute encoder that this exporter will use.\nHide the timestamps from exported results\nSet a formatter for serializing export batch data\nSet the writer that this exporter will use.\nAn interface returned by an <code>Aggregator</code> containing an …\nA short name for the <code>Aggregator</code> that produces an …\nBuckets represent histogram buckets boundaries and counts.\nCount returns the number of values that were aggregated.\nIndicates that an Exporter expects a Cumulative …\nIndicates that an Exporter expects a Delta Aggregation.\nAggregations that return a distribution\nHistogram returns the count of events in pre-determined …\nAggregations that return only the latest value.\nLastValue returns the latest value that was aggregated.\nAggregations that return a minimum.\nAggregations that return a minimum.\nSum returns an aggregated max.\nSum returns an aggregated min.\nAggregations that return an aggregated sum.\nSum returns an aggregated sum.\nTemporality indicates the temporal aggregation exported by …\nTemporalitySelector is a sub-interface of Exporter used to …\nBoundaries of the histogram buckets\nReturns an <code>TemporalitySelector</code> that returns a constant …\nThe count of the currently aggregated metrics\nCounts of the histogram buckets\nReturns an <code>TemporalitySelector</code> that always returns …\nReturns an <code>TemporalitySelector</code> that always returns …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuckets for this histogram.\nTests whether <code>kind</code> includes a specific kind of exporter.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA short identifying string to identify the <code>Aggregator</code> that …\nThe last value of the currently aggregated metrics\nThe max of the currently aggregated metrics\nReturns whether a temporality of this kind requires memory …\nThe min of the currently aggregated metrics\nCreate new buckets\nCreate a new custom aggregation kind\nReturns a <code>TemporalitySelector</code> that always returns the …\nThe sum of the currently aggregated metrics\nTemporalityFor should return the correct Temporality that …\nContains the error value\nDescribes the result of an export.\nContains the success value\n<code>SpanData</code> contains all the information collected by a <code>Span</code> …\n<code>SpanExporter</code> defines the interface that protocol-specific …\nSpan attributes\nSpan end time\nSpan events\nExports a batch of readable spans. Protocol exporters that …\nThis is a hint to ensure that the export of any Spans the …\nReturns the argument unchanged.\nInstrumentation library that produced this span\nCalls <code>U::from(self)</code>.\nSpan Links\nSpan name\nSpan parent id\nResource contains attributes representing an entity that …\nShuts down the exporter. Called when SDK is shut down. …\nExportable <code>SpanContext</code>\nSpan kind\nSpan start time\nSpan status\nStdout Span Exporter\nA <code>SpanExporter</code> that writes to <code>Stdout</code> or other configured …\nPipeline builder\nReturn the default pipeline builder.\nExport spans to stdout\nReturns the argument unchanged.\nReturns the argument unchanged.\nInstall the stdout exporter pipeline with the recommended …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new stdout <code>Exporter</code>.\nCreate a new stdout exporter pipeline builder.\nSpecify the pretty print setting.\nAssign the SDK trace configuration.\nSpecify the writer to use.\nAccumulator implements the OpenTelemetry Meter API. The …\nCreates a new accumulator builder\nMetric Aggregators\nTraverses the list of active records and observers and …\nSDK Metrics Controllers\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMetric Processors\nMetrics Registry API\nSDK API\nAggregator Selectors\nAggregator implements a specific aggregation behavior, …\nThis aggregator observes events and counts them in …\nAggregates last value events.\nAn aggregator for counter events.\nThe interface to access the current state of this …\nReturns the implementing aggregator as <code>Any</code> for downcasting.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new histogram for the given descriptor with the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>LastValueAggregator</code>\nThis combines the checkpointed state from the argument …\nRangeTest is a common routine for testing for valid input …\nCreate a new sum aggregator.\nThis method is called during collection to finish one …\nUpdate receives a new measured value and incorporates it …\nOrganizes and synchronizes collection of metric data in …\nOptions for configuring a <code>BasicController</code>\nReturns a new builder using the provided checkpointer …\nCreates a new basic controller.\nRequests a collection.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\ntrue if the controller was started via <code>start</code>, indicating …\nGet a reference to the current resource.\nThis begins a ticker that periodically collects and …\nThis waits for the background worker to return and then …\nSets the interval between calls to <code>collect</code> a checkpoint.\nSets the timeout of the <code>collect</code> and subsequent observer …\nSets the exporter used for exporting metric data.\nSets push controller timeout when a exporter is configured.\nSets the <code>Resource</code> used for this controller.\nBasic metric integration strategy\nCreate a new basic processor\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn extension trait that allows meters to be downcast\nImplements the <code>MeterCore</code> interface, adding uniqueness …\nReturns the current type as <code>Any</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>UniqueInstrumentMeterCore</code> from a …\nA utility extension to allow upcasting.\nAn implementation-level interface to an asynchronous …\nAn atomic version of <code>Number</code>\nA synchronous per-request part of a monotonic sum.\nAn asynchronous per-interval recorder of a monotonic sum.\nDescriptor contains all the settings that describe an …\nA Number that stores <code>f64</code> values.\nA gauge observer instrument\nA histogram instrument\nA Number that stores <code>i64</code> values.\nA common interface for synchronous and asynchronous …\nKinds of OpenTelemetry metric instruments\nThe interface an SDK must implement to supply a Meter …\nNumber represents either an integral or a floating point …\nA descriptor for the encoded data type of a <code>Number</code>\nThe implementation-level interface to a generic …\nA Number that stores <code>u64</code> values.\nA synchronous per-request part of a non-monotonic sum.\nAn asynchronous per-interval recorder of a non-monotonic …\nWhether this kind of instrument adds its inputs (as …\nReturns self as any\nCreate an <code>Arc&lt;dyn InstrumentCore&gt;</code> from an impl of …\nWhether this is a synchronous kind of instrument.\nThe pre-computed hash of the descriptor data\nA human-readable description of the metric instrument.\nDescription of the instrument’s descriptor\nAdds to the current number. Both numbers must be of the …\nSets the number to the new maximum.\nSets the number to the new minimum.\nSubtracts from the current number. Both numbers must be of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether this kind of instrument groups its inputs (as …\nThe specific kind of instrument.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if this value ia an f64 nan value. Do not use on …\n<code>true</code> if the actual value is less than zero.\nLoads the current <code>Number</code>.\nReturns the max value for each kind\nReturns the min value for each kind\nWhether this kind of instrument exposes a non-decreasing …\nThe metric instrument’s name.\nCreate a new descriptor\nCreate a new asynchronous instrument implementation.\nCreate a new synchronous instrument implementation.\nNumberKind returns whether this instrument is declared …\nCaptures a single asynchronous metric event.\nCompares this number to the given other number. Both …\nWhether this kind of instrument receives precomputed sums.\nCapture a single synchronous metric event.\nRegister a batch observer\nAssign a new description\nStores a <code>Number</code> into the atomic number.\nWhether this is a synchronous kind of instrument.\nCreate an atomic version of the current number\nReturn loaded data for debugging purposes\nCasts the number to <code>f64</code>. May result in data/precision loss.\nCasts the number to <code>i64</code>. May result in data/precision loss.\nCasts the number to <code>u64</code>. May result in data/precision loss.\nUnit describes the units of the metric instrument.\nwraps impl to be a full implementation of a Meter.\nReturns the zero value for each kind\nSimple Metric Selectors\nA simple aggregator selector that uses histogram …\nThis selector is faster and uses less memory than the …\nPropagates name-value pairs in W3C Baggage format.\nComposite propagator\nPropagates <code>SpanContext</code>s in W3C TraceContext format.\nExtracts a <code>Context</code> with baggage values from a <code>Extractor</code>.\nRetrieves encoded <code>Context</code> information using the <code>Extractor</code>. …\nRetrieves encoded <code>SpanContext</code>s using the <code>Extractor</code>. It …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEncodes the values of the <code>Context</code> and injects them into …\nEncodes the values of the <code>Context</code> and injects them into …\nProperly encodes the values of the <code>SpanContext</code> and injects …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a new baggage propagator.\nConstructs a new propagator out of instances of …\nCreate a new <code>TraceContextPropagator</code>.\nResource detector implements ResourceDetector and is used …\nAn owned iterator over the entries of a <code>Resource</code>.\nAn iterator over the entries of a <code>Resource</code>.\nDetect runtime operating system information.\nDetect process information.\nAn immutable representation of the entity producing …\nResourceDetector detects OpenTelemetry resource information\nThere are attributes which MUST be provided by the SDK as …\nDetect the telemetry SDK information used to capture data …\ndetect returns an initialized Resource based on gathered …\nCreates an empty resource.\nEncoded attributes\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>Resource</code> from resource detectors.\nCreate a new <code>Resource</code> from a key value pairs and schema url…\nRetrieve the value from resource associate with given key.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the resource contains no attributes.\nGets an iterator over the attributes of this resource, …\nReturns the number of attributes for this resource\nCreate a new <code>Resource</code> by combining two resources.\nCreate <code>EnvResourceDetector</code> instance.\nCreate a new <code>Resource</code> from key value pairs.\nReturn the schema url of the resource. If the resource …\nA future, which resolves after a previously specified …\nA future stream, which returns items in a previously …\nA runtime is an abstraction of an async runtime like Tokio …\nReturn a new future, which resolves after the specified …\nCreate a Stream, which returns a new item every Duration.\nSpawn a new task or thread, which executes the given …\nNever sample the trace\nAlways sample the trace\nBatch span processor configuration\nMessages sent between application thread and batch span …\nA <code>SpanProcessor</code> that asynchronously buffers finished spans …\nA builder for creating <code>BatchSpanProcessor</code> instances.\nBuilder for provider attributes.\nTracer configuration\nA hash map with a capped number of attributes that retains …\nThis queue maintains an ordered list of elements, and a …\nExport spans, usually called when span ends\nFlush the current buffer to the backend, it can be …\nInterface for generating IDs\nRespects the parent span’s sampling decision or …\nDefault <code>IdGenerator</code> implementation.\nA future stream to receive the batch messages from …\nDefault Sampling options\nA batch messages sender that could be sent across thread …\nThe <code>ShouldSample</code> interface allows implementations to …\nShut down the worker thread, push all spans in buffer to …\nA <code>SpanProcessor</code> that exports synchronously when spans are …\nSingle operation within a trace.\nSpan limit configuration to keep attributes, events and …\n<code>SpanProcessor</code> is an interface which allows hooks for span …\nSample a given fraction of traces. Fractions &gt;= 1 will …\nTrace runtime is an extension to <code>Runtime</code>. Currently it …\n<code>Tracer</code> implementation to create and manage spans\nCreator and registry of named <code>Tracer</code> instances.\nTrySend is an abstraction of sender that is capable to …\nGenerates AWS X-Ray compliant Trace and Span ids.\nRecords events at a specific time in the context of a …\nMoves all the elements of other into self, leaving other …\nReturn the sender and receiver used to send batch message …\nCreate a new provider from this configuration.\nBuild a batch processor\nStarts a span from a <code>SpanBuilder</code>.\nReturns a trait object so the underlying implementation …\nCreate a new batch processor builder\nCreate a new <code>TracerProvider</code> builder.\nDefault trace configuration\nConfig associated with this tracer\nCreate default global sdk configuration.\nReport span on inner drop\nReturns the dropped attribute count\nCount of dropped attributes\nFinishes the span with given timestamp.\nConvert information in this span into …\nFormats the <code>Tracer</code> using the given formatter. Omitting …\nForce the spans lying in the cache to be exported.\nForce flush all remaining spans in span processors and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the value corresponding to the key …\nThe id generator that the sdk should use\nInserts a key-value pair into the map.\nInstrumentation library information of this tracer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the map is empty.\nReturns <code>true</code> if the <code>EvictedQueue</code> is empty.\nReturns true if this <code>Span</code> is recording information like …\nReturns a front-to-back iterator.\nReturns a front-to-back iterator.\nReturns the number of elements in the map.\nReturns the number of elements in the <code>EvictedQueue</code>.\nThe max attributes that can be added into an <code>Event</code>\nThe max attributes that can be added into a <code>Link</code>\nThe max attributes that can be added to a <code>Span</code>.\nThe max events that can be added to a <code>Span</code>.\nThe max links that can be added to a <code>Span</code>.\nCreate a new <code>EvictedHashMap</code> with a given max length and …\nCreate a new <code>EvictedQueue</code> with a given max length.\nGenerate a new <code>SpanId</code>\nGenerates a new <code>SpanId</code> that can be converted to an X-Ray …\nGenerate a new <code>TraceId</code>\nGenerates a new <code>TraceId</code> that can be converted to an X-Ray …\n<code>on_end</code> is called after a <code>Span</code> is ended (i.e., the end …\n<code>on_start</code> is called when a <code>Span</code> is started.  This method is …\nTracerProvider associated with this tracer.\nContains attributes representing an entity that produces …\nThe sampler that the sdk should use\nSets a single <code>Attribute</code> where the attribute properties are …\nSets the status of this <code>Span</code>.\nReturns the <code>SamplingDecision</code> for a <code>Span</code> to be created.\nShuts down the processor. Called when SDK is shut down. …\nReturns the <code>SpanContext</code> for the given <code>Span</code>.\nspan limits\nSpan processors associated with this provider\nTry to send one batch message to worker thread.\nUpdates the <code>Span</code>’s name.\nCreate a new versioned <code>Tracer</code> instance.\nReturn a versioned boxed tracer\nSet the BatchConfig for BatchSpanProcessorBuilder\nThe <code>SpanExporter</code> setup using a default <code>BatchSpanProcessor</code> …\nThe sdk <code>crate::trace::Config</code> that this provider will use.\nSpecify the id generator to be used.\nSpecify the number of attributes one event can have.\nSpecify the number of attributes one link can have.\nSpecify the number of attributes to be recorded per span.\nSet max_concurrent_exports for <code>BatchConfig</code>. It’s the …\nSet the maximum number of concurrent exports\nSpecify the number of events to be recorded per span.\nSet max_export_batch_size for <code>BatchConfig</code>. It’s the …\nSet max export size for batches, should always less than …\nSet max_export_timeout for <code>BatchConfig</code>. It’s the maximum …\nSpecify the number of events to be recorded per span.\nSet max_queue_size for <code>BatchConfig</code>. It’s the maximum …\nSet max queue size for batches\nSet max timeout for exporting.\nSpecify the attributes representing the entity that …\nSpecify the sampler to be used.\nSet scheduled_delay_duration for <code>BatchConfig</code>. It’s the …\nSet scheduled delay for batches\nThe <code>SpanExporter</code> that this provider should use.\nSpecify all limit via the span_limits\nThe <code>SpanProcessor</code> that this provider should use.")