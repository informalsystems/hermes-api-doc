searchState.loadedDescShard("canonical_path", 0, "Path newtypes which are always guaranteed to be canonical\nA reference type for a canonical filesystem path\nAn owned path on the filesystem which is guaranteed to be …\nReturn a <code>CanonicalPath</code> reference.\nReturn an <code>OsStr</code> reference.\nReturn an <code>OsStr</code> reference.\nReturn a <code>Path</code> reference.\nReturn a <code>Path</code> reference.\nCreate a canonical path by first canonicalizing the given …\nProduces an iterator over the <code>Component</code>s of a path\nProduces an iterator over the <code>Component</code>s of a path\nReturns the full, canonicalized filesystem path of the …\nReturns an object that implements <code>Display</code> for safely …\nReturns an object that implements <code>Display</code> for safely …\nDetermines whether child is a suffix of self.\nDetermines whether child is a suffix of self.\nDoes this path exist?\nDoes this path exist?\nExtracts the extension of <code>self.file_name</code>, if possible.\nExtracts the extension of <code>self.file_name</code>, if possible.\nReturns the final component of the path, if there is one.\nReturns the final component of the path, if there is one.\nExtracts the stem (non-extension) portion of <code>self.file_name</code>…\nExtracts the stem (non-extension) portion of <code>self.file_name</code>…\nReturns the argument unchanged.\nCreate a canonical path from a path, skipping the …\nCalls <code>U::from(self)</code>.\nConsumes the <code>CanonicalPathBuf</code>, yielding its internal …\nConsumes the <code>CanonicalPathBuf</code>, yielding its internal …\nIs this path a directory?\nIs this path a directory?\nIs this path a file?\nIs this path a file?\nProduces an iterator over the path’s components viewed as\nProduces an iterator over the path’s components viewed as\nJoin a path onto a canonical path, returning a …\nJoin a path onto a canonical path, returning a …\nQueries the file system to get information about a file, …\nQueries the file system to get information about a file, …\nCreate a canonical path, returning error if the supplied …\nCreate a canonical path, returning error if the supplied …\nReturn a canonical parent path of this path, or <code>io::Error</code> …\nReturn a canonical parent path of this path, or <code>io::Error</code> …\nReturns an iterator over the entries within a directory.\nReturns an iterator over the entries within a directory.\nUpdates <code>self.extension</code> to extension.\nUpdates <code>self</code>’s filename ala the same method on <code>PathBuf</code>\nDetermines whether base is a prefix of self.\nDetermines whether base is a prefix of self.\nConvert a canonical path reference into an owned …\nYields a <code>&amp;str</code> slice if the path is valid unicode.\nYields a <code>&amp;str</code> slice if the path is valid unicode.\nCreates an owned <code>CanonicalPathBuf</code> like self but with the …\nCreates an owned <code>CanonicalPathBuf</code> like self but with the …\nCreates an owned <code>CanonicalPathBuf</code> like self but with the …\nCreates an owned <code>CanonicalPathBuf</code> like self but with the …")