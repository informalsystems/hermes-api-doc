window.SIDEBAR_ITEMS = {"enum":[["All","Represents the set of all capabilities."],["Error","The main error type for this library."],["Parity","Represents the parity passed between FFI function calls."],["SignOnly","Represents the set of capabilities needed for signing."],["VerifyOnly","Represents the set of capabilities needed for verification."]],"macro":[["impl_array_newtype","Implement methods and traits for types that contain an inner array."]],"mod":[["constants","Constants related to the API and the underlying curve."],["ecdh","Support for shared secret computations."],["ecdsa","Structs and functionality related to the ECDSA signature algorithm."],["scalar","Provides [`Scalar`] and related types."],["schnorr","Support for schnorr signatures."]],"struct":[["AllPreallocated","Represents the set of all capabilities (preallocated memory)."],["InvalidParityValue","Error returned when conversion from an integer to `Parity` fails."],["KeyPair","Opaque data structure that holds a keypair consisting of a secret and a public key."],["Message","A (hashed) message input to an ECDSA signature."],["PublicKey","A Secp256k1 public key, used for verification of signatures."],["Secp256k1","The secp256k1 engine, used to execute all signature operations."],["SecretKey","Secret 256-bit key used as `x` in an ECDSA signature."],["SignOnlyPreallocated","Represents the set of capabilities needed for signing (preallocated memory)."],["VerifyOnlyPreallocated","Represents the set of capabilities needed for verification (preallocated memory)."],["XOnlyPublicKey","An x-only public key, used for verification of schnorr signatures and serialized according to BIP-340."]],"trait":[["Context","A trait for all kinds of contexts that lets you define the exact flags and a function to deallocate memory. It isnâ€™t possible to implement this for types outside this crate."],["PreallocatedContext","Trait marking that a particular context object internally points to memory that must outlive `'a`"],["Signing","Marker trait for indicating that an instance of [`Secp256k1`] can be used for signing."],["ThirtyTwoByteHash","Trait describing something that promises to be a 32-byte random number; in particular, it has negligible probability of being zero or overflowing the group order. Such objects may be converted to `Message`s without any error paths."],["Verification","Marker trait for indicating that an instance of [`Secp256k1`] can be used for verification."]]};