window.SIDEBAR_ITEMS = {"mod":[["msg_client","Generated client implementations."],["query_client","Generated client implementations."],["throttled_packet_data_wrapper","Nested message and enum types in `ThrottledPacketDataWrapper`."]],"struct":[["AddressList","AddressList contains a list of consensus addresses"],["Chain",""],["ChannelToChain",""],["ConsumerAdditionProposal","ConsumerAdditionProposal is a governance proposal on the provider chain to spawn a new consumer chain. If it passes, then all validators on the provider chain are expected to validate the consumer chain at spawn time or get slashed. It is recommended that spawn time occurs after the proposal end time."],["ConsumerAdditionProposals","ConsumerAdditionProposals holds pending governance proposals on the provider chain to spawn a new chain."],["ConsumerAddrsToPrune","Used to serialize the ConsumerAddrsToPrune index from key assignment ConsumerAddrsToPrune: (chainID, vscID uint64) -> consumerAddrs AddressList"],["ConsumerRemovalProposal","ConsumerRemovalProposal is a governance proposal on the provider chain to remove (and stop) a consumer chain. If it passes, all the consumer chain’s state is removed from the provider chain. The outstanding unbonding operation funds are released."],["ConsumerRemovalProposals","ConsumerRemovalProposals holds pending governance proposals on the provider chain to remove (and stop) a consumer chain."],["ConsumerState","consumer chain"],["EquivocationProposal",""],["GenesisState","GenesisState defines the CCV provider chain genesis state"],["GlobalSlashEntry","A persisted queue entry indicating that a slash packet data instance needs to be handled. This type belongs in the “global” queue, to coordinate slash packet handling times between consumers."],["HandshakeMetadata",""],["InitTimeoutTimestamp",""],["KeyAssignmentReplacement",""],["MsgAssignConsumerKey",""],["MsgAssignConsumerKeyResponse",""],["MsgSubmitConsumerMisbehaviour","MsgSubmitConsumerMisbehaviour defines a message that reports a misbehaviour observed on a consumer chain"],["MsgSubmitConsumerMisbehaviourResponse",""],["Params","Params defines the parameters for CCV Provider module"],["QueryConsumerChainStartProposalsRequest",""],["QueryConsumerChainStartProposalsResponse",""],["QueryConsumerChainStopProposalsRequest",""],["QueryConsumerChainStopProposalsResponse",""],["QueryConsumerChainsRequest",""],["QueryConsumerChainsResponse",""],["QueryConsumerGenesisRequest",""],["QueryConsumerGenesisResponse",""],["QueryThrottleStateRequest",""],["QueryThrottleStateResponse",""],["QueryThrottledConsumerPacketDataRequest",""],["QueryThrottledConsumerPacketDataResponse",""],["QueryValidatorConsumerAddrRequest",""],["QueryValidatorConsumerAddrResponse",""],["QueryValidatorProviderAddrRequest",""],["QueryValidatorProviderAddrResponse",""],["SlashAcks","SlashAcks contains addesses of consumer chain validators successfully slashed on the provider chain"],["ThrottledPacketDataWrapper","ThrottledPacketDataWrapper contains either SlashPacketData or VSCMaturedPacketData"],["ThrottledSlashPacket","A query wrapper type for the global entry and data relevant to a throttled slash packet."],["UnbondingOp","UnbondingOp contains the ids of consumer chains that need to unbond before the unbonding operation with the given ID can unbond"],["ValidatorByConsumerAddr","Used to serialize the ValidatorConsumerAddr index from key assignment ValidatorByConsumerAddr: (chainID, consumerAddr consAddr) -> providerAddr consAddr"],["ValidatorConsumerPubKey","Used to serialize the ValidatorConsumerPubKey index from key assignment ValidatorConsumerPubKey: (chainID, providerAddr consAddr) -> consumerKey tmprotocrypto.PublicKey"],["ValsetUpdateIdToHeight","ValsetUpdateIdToHeight defines the genesis information for the mapping of each valset udpate id to a block height"],["VscSendTimestamp",""],["VscUnbondingOps","VscUnbondingOps contains the IDs of unbonding operations that are waiting for at least one VSCMaturedPacket with vscID from a consumer chain"]]};