window.SIDEBAR_ITEMS = {"enum":[["State","State defines if a connection is in one of the following states: INIT, TRYOPEN, OPEN or UNINITIALIZED."]],"mod":[["msg_client","Generated client implementations."],["query_client","Generated client implementations."]],"struct":[["ClientPaths","ClientPaths define all the connection paths for a client state."],["ConnectionEnd","ConnectionEnd defines a stateful object on a chain connected to another separate one. NOTE: there must only be 2 defined ConnectionEnds to establish a connection between two chains."],["ConnectionPaths","ConnectionPaths define all the connection paths for a given client state."],["Counterparty","Counterparty defines the counterparty chain associated with a connection end."],["GenesisState","GenesisState defines the ibc connection submoduleâ€™s genesis state."],["IdentifiedConnection","IdentifiedConnection defines a connection with additional connection identifier field."],["MsgConnectionOpenAck","MsgConnectionOpenAck defines a msg sent by a Relayer to Chain A to acknowledge the change of connection state to TRYOPEN on Chain B."],["MsgConnectionOpenAckResponse","MsgConnectionOpenAckResponse defines the Msg/ConnectionOpenAck response type."],["MsgConnectionOpenConfirm","MsgConnectionOpenConfirm defines a msg sent by a Relayer to Chain B to acknowledge the change of connection state to OPEN on Chain A."],["MsgConnectionOpenConfirmResponse","MsgConnectionOpenConfirmResponse defines the Msg/ConnectionOpenConfirm response type."],["MsgConnectionOpenInit","MsgConnectionOpenInit defines the msg sent by an account on Chain A to initialize a connection with Chain B."],["MsgConnectionOpenInitResponse","MsgConnectionOpenInitResponse defines the Msg/ConnectionOpenInit response type."],["MsgConnectionOpenTry","MsgConnectionOpenTry defines a msg sent by a Relayer to try to open a connection on Chain B."],["MsgConnectionOpenTryResponse","MsgConnectionOpenTryResponse defines the Msg/ConnectionOpenTry response type."],["Params","Params defines the set of Connection parameters."],["QueryClientConnectionsRequest","QueryClientConnectionsRequest is the request type for the Query/ClientConnections RPC method"],["QueryClientConnectionsResponse","QueryClientConnectionsResponse is the response type for the Query/ClientConnections RPC method"],["QueryConnectionClientStateRequest","QueryConnectionClientStateRequest is the request type for the Query/ConnectionClientState RPC method"],["QueryConnectionClientStateResponse","QueryConnectionClientStateResponse is the response type for the Query/ConnectionClientState RPC method"],["QueryConnectionConsensusStateRequest","QueryConnectionConsensusStateRequest is the request type for the Query/ConnectionConsensusState RPC method"],["QueryConnectionConsensusStateResponse","QueryConnectionConsensusStateResponse is the response type for the Query/ConnectionConsensusState RPC method"],["QueryConnectionParamsRequest","QueryConnectionParamsRequest is the request type for the Query/ConnectionParams RPC method."],["QueryConnectionParamsResponse","QueryConnectionParamsResponse is the response type for the Query/ConnectionParams RPC method."],["QueryConnectionRequest","QueryConnectionRequest is the request type for the Query/Connection RPC method"],["QueryConnectionResponse","QueryConnectionResponse is the response type for the Query/Connection RPC method. Besides the connection end, it includes a proof and the height from which the proof was retrieved."],["QueryConnectionsRequest","QueryConnectionsRequest is the request type for the Query/Connections RPC method"],["QueryConnectionsResponse","QueryConnectionsResponse is the response type for the Query/Connections RPC method."],["Version","Version defines the versioning scheme used to negotiate the IBC verison in the connection handshake."]]};