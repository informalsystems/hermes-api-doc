window.SIDEBAR_ITEMS = {"enum":[["SamplingDecision","Decision about whether or not to sample"],["SpanKind","`SpanKind` describes the relationship between the [`Span`], its parents, and its children in a trace."],["Status","The status of a [`Span`]."],["TraceError","Errors returned by the trace API."]],"fn":[["get_active_span","Executes a closure with a reference to this thread’s current span."],["mark_span_as_active","Mark a given `Span` as active."]],"mod":[["noop","No-op trace impls"]],"struct":[["Event","Events record things that happened during a [`Span`]’s lifetime."],["Link","Link is the relationship between two Spans."],["OrderMap","A hash table implementation that preserves insertion order across all operations."],["SamplingResult","The result of sampling logic for a given span."],["SpanBuilder","`SpanBuilder` allows span attributes to be configured before the span has started."],["SpanContext","Immutable portion of a `Span` which can be serialized and propagated."],["SpanId","An 8-byte value which identifies a given span."],["SpanRef","A reference to the currently active span in this context."],["TraceFlags","Flags that can be set on a [`SpanContext`]."],["TraceId","A 16-byte value which identifies a given trace."],["TraceState","TraceState carries system-specific configuration data, represented as a list of key-value pairs. TraceState allows multiple tracing systems to participate in the same trace."],["WithContext","A future, stream, or sink that has an associated context."]],"trait":[["FutureExt","Extension trait allowing futures, streams, and sinks to be traced with a span."],["Span","The interface for a single operation within a trace."],["TraceContextExt","Methods for storing and retrieving trace data in a [`Context`]."],["Tracer","The interface for constructing [`Span`]s."],["TracerProvider","Types that can create instances of [`Tracer`]."]],"type":[["TraceResult","Describe the result of operations in tracing API."]]};