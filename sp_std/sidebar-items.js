initSidebarItems({"externcrate":[["alloc",""]],"macro":[["if_std",""],["map",""],["vec","Creates a `Vec` containing the arguments."]],"mod":[["any","This module implements the `Any` trait, which enables dynamic typing of any `'static` type through runtime reflection."],["borrow",""],["boxed","A pointer type for heap allocation."],["cell","Shareable mutable containers."],["clone","The `Clone` trait for types that cannot be ‘implicitly copied’."],["cmp","Functionality for ordering and comparison."],["collections",""],["convert","Traits for conversions between types."],["default","The `Default` trait for types which may have meaningful default values."],["fmt","Utilities for formatting and printing strings."],["hash","Generic hashing support."],["iter","Composable external iteration."],["marker","Primitive traits and types representing basic properties of types."],["mem","Basic functions for dealing with memory."],["num","Numeric traits and functions for the built-in numeric types."],["ops","Overloadable operators."],["prelude","Prelude of common useful imports."],["ptr","Manually manage memory through raw pointers."],["rc","Single-threaded reference-counting pointers. ‘Rc’ stands for ‘Reference Counted’."],["result","Error handling with the `Result` type."],["slice","Slice management and manipulation."],["str","String manipulation."],["sync","Thread-safe reference-counting pointers."],["thread",""],["vec","A contiguous growable array type with heap-allocated contents, written `Vec<T>`."]],"struct":[["Writer","A target for `core::write!` macro - constructs a string in memory."]]});